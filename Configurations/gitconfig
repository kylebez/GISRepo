[merge]
	tool = vsdiffmerge
	guitool = vscode
	conflictstyle = zdiff3
[mergetool]
	prompt = true
[diff]
	tool = vsdiffmerge
	guitool = vscode
	algorithm = histogram
	colorMoved = plain
	colorMovedWS = allow-indentation-change
[diff "astextplain"]
	textconv = astextplain
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[http]
	sslBackend = openssl
	sslCAInfo = C:/Program Files/Git/mingw64/etc/ssl/certs/ca-bundle.crt
	sslverify = false
[core]
	autocrlf = true
	fscache = true
	symlinks = true
	editor = wordpad
	useBuiltinFSMonitor = false
[fetch]
	prune = true
	pruneTags = true
[pull]
	rebase = merges
[rebase]
	autoStash = false
	autoSquash = true
	updateRefs = true
	abbreviateCommands = true
[credential]
	helper = manager
[credential "https://dev.azure.com"]
	useHttpPath = true
[init]
	defaultBranch = master
[color "status"]
  added = green bold
  changed = red bold strike
  untracked = cyan
  branch = yellow black bold ul
[filter "removeLinting"]
	clean = "python 'C:/RepoProjects/ArcGISTools (ADO)/test_filter.py'"
[rerere]
	autoUpdate = true
	enabled = true
[commit]
	verbose = true
[alias]
  forgotten = branch --no-merged master
  force-commit = "!f() { git commit --no-verify -m \"$1\"; }; f"
  sas = "!f() { git stash push -m \"working\" -u && git switch $1; }; f" 
  sap = "!f() { git switch $1 && git stash pop; }; f"
  update-master = "!f() { cb=$(git branch --show-current); git sas master && git pull && git sap $cb; }; f"
  oops-wrong-branch = "!f() { csha=$(git rev-parse HEAD);psha=$(git rev-parse HEAD~1);cb=$(git branch --show-current); git checkout $1 && git cherry-pick $csha && git checkout $cb && git reset --mixed $psha; }; f"
  clean-refs = reflog expire --expire-unreachable=now --all
  check-m-sync = "!f() { ff() { echo \"$(git branch --list \"$1\")\"; }; m=$(ff \"master\"); if [ -z \"$m\" ]; then m=$(ff \"main\"); fi; m=$(echo \"$m\" | xargs); echo \"This branch is $(git rev-list --left-right --count \"$m\"...HEAD | awk '{print $1}') behind the main or master branch\"; }; f"
  update-check-sync = "!f() { git update-master; git check-m-sync; }; f"
  ucs = update-check-sync
  list-flagged = "!f(){ git ls-files -v | grep ^[SL]; }; f"
  create-from-m = "!f() { ff() { echo \"$(git branch --list \"$1\")\"; }; m=$(ff \"master\"); if [ -z \"$m\" ]; then m=$(ff \"main\"); fi; m=$(echo \"$m\" | xargs); git checkout \"$m\" && git pull origin \"$m\" && git checkout -b "$1"; }; f"
  remove-working-commits = '!(git rebase --exec 'sh -c "if [ $(git log -1 --pretty=%S) = <commit-hash-to-drop> ]; then exit 1; fi"' $1)'
  cherry-pick-multi = "!f() { commit=$1; shift; for branch in \"$@\"; do git checkout $branch && git cherry-pick $commit; done; git checkout -; }; f"
  toggle-skip-worktree = "!f() { for file in \"$@\"; do if git ls-files \"$file\" -t | grep ^S; then git update-index --no-skip-worktree \"$file\"; else git update-index --skip-worktree \"$file\"; fi; done; }; f"
  tsw = toggle-skip-worktree
  pop-and-drop = git stash pop && git stash drop